name: Deploy to GitHub Pages

on:
  push:
    branches: [ "**" ]  # Executa em qualquer branch
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Run tests
        run: mvn clean test
        
      - name: Generate Allure Report
        run: mvn allure:report
        
      - name: Download existing GitHub Pages
        continue-on-error: true
        run: |
          # Estrat√©gia melhorada: usar GitHub API para baixar conte√∫do atual
          echo "üîÑ Tentando preservar relat√≥rios existentes..."
          
          # M√©todo 1: Tentar baixar via GitHub Pages URL
          if curl -s -f -L "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" > /dev/null; then
            echo "üì• GitHub Pages site encontrado, baixando estrutura..."
            
            # Cria diret√≥rio tempor√°rio para download
            mkdir -p temp-pages
            cd temp-pages
            
            # Baixa o index.html atual para extrair lista de branches
            curl -s -L "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" -o current-index.html || echo "Failed to download index"
            
            # Extrai branches existentes do HTML (busca por links para diret√≥rios)
            if [ -f current-index.html ]; then
              grep -oP 'href="\.\/[^"]+\/"' current-index.html | sed 's/href="\.\/\([^"]*\)\/"/\1/' > ../existing-branches.txt || echo "No branches found in index"
            fi
            
            cd ..
            rm -rf temp-pages
            
            # Tenta baixar cada branch existente
            if [ -f existing-branches.txt ]; then
              echo "üìã Branches encontradas:"
              cat existing-branches.txt
              
              mkdir -p ./pages-output
              while IFS= read -r branch; do
                if [ ! -z "$branch" ] && [ "$branch" != "${{ github.ref_name }}" ]; then
                  echo "‚¨áÔ∏è  Baixando relat√≥rio da branch: $branch"
                  mkdir -p "./pages-output/$branch"
                  
                  # Tenta baixar o index.html da branch para verificar se existe
                  if curl -s -f -L "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$branch/index.html" -o "./pages-output/$branch/index.html"; then
                    echo "‚úÖ Branch $branch preservada"
                    
                    # Baixa outros arquivos essenciais do Allure
                    curl -s -f -L "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$branch/app.js" -o "./pages-output/$branch/app.js" || echo "app.js not found for $branch"
                    curl -s -f -L "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$branch/styles.css" -o "./pages-output/$branch/styles.css" || echo "styles.css not found for $branch"
                    
                    # Tenta baixar a pasta data (cont√©m os dados do relat√≥rio)
                    mkdir -p "./pages-output/$branch/data"
                    curl -s -f -L "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$branch/data/suites.json" -o "./pages-output/$branch/data/suites.json" || echo "suites.json not found for $branch"
                  else
                    echo "‚ùå Falha ao baixar branch $branch"
                    rm -rf "./pages-output/$branch"
                  fi
                fi
              done < existing-branches.txt
            fi
          else
            echo "‚ÑπÔ∏è  Nenhum site GitHub Pages encontrado ainda - primeira execu√ß√£o"
          fi
        
      - name: Create/Update directory structure for GitHub Pages
        run: |
          # Cria estrutura base se n√£o existir
          mkdir -p ./pages-output
          
          # Cria/atualiza diret√≥rio da branch atual
          echo "üîÑ Processando branch: ${{ github.ref_name }}"
          mkdir -p ./pages-output/${{ github.ref_name }}
          cp -r ./target/allure-report/* ./pages-output/${{ github.ref_name }}/
          
          # Adiciona timestamp ao relat√≥rio da branch
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" > ./pages-output/${{ github.ref_name }}/timestamp.txt
          
          echo "‚úÖ Updated report for branch: ${{ github.ref_name }}"
          echo "üìÅ Current structure:"
          find ./pages-output -type d | head -20
          
          # Lista todas as branches dispon√≠veis para o index
          echo "üìã Generating branch list..."
          ls -1 ./pages-output/ | grep -v "index.html" | sort > available-branches.txt
          echo "Available branches:"
          cat available-branches.txt
          
      - name: Create dynamic index page
        run: |
          cat > ./pages-output/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Allure Reports - Spring Boot Demo</title>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                      margin: 40px auto; 
                      max-width: 900px; 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      padding: 20px;
                      box-sizing: border-box;
                  }
                  .container { 
                      background: white; 
                      padding: 40px; 
                      border-radius: 12px; 
                      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                  }
                  h1 { 
                      color: #2c3e50; 
                      margin-bottom: 10px;
                      font-size: 2.5em;
                      text-align: center;
                  }
                  .subtitle {
                      text-align: center;
                      color: #7f8c8d;
                      margin-bottom: 40px;
                      font-size: 1.1em;
                  }
                  .branch-list { list-style: none; padding: 0; }
                  .branch-item { 
                      margin: 20px 0; 
                      padding: 25px; 
                      border: 2px solid #e1e8ed; 
                      border-radius: 10px; 
                      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                      transition: all 0.3s ease;
                      position: relative;
                      overflow: hidden;
                  }
                  .branch-item:hover { 
                      background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
                      transform: translateY(-3px);
                      box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                      border-color: #2196f3;
                  }
                  .branch-item::before {
                      content: '';
                      position: absolute;
                      top: 0;
                      left: 0;
                      width: 4px;
                      height: 100%;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  }
                  .branch-item a { 
                      text-decoration: none; 
                      color: #1565c0; 
                      font-weight: 600;
                      font-size: 20px;
                      display: block;
                      margin-bottom: 8px;
                  }
                  .branch-item a:hover { 
                      text-decoration: underline; 
                      color: #0d47a1;
                  }
                  .description { 
                      color: #546e7a; 
                      margin: 8px 0;
                      font-size: 14px;
                  }
                  .timestamp { 
                      color: #78909c; 
                      font-size: 13px; 
                      margin-top: 12px;
                      font-style: italic;
                      display: flex;
                      align-items: center;
                      gap: 5px;
                  }
                  .timestamp::before {
                      content: 'üïí';
                  }
                  .branch-badge {
                      display: inline-block;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      padding: 4px 12px;
                      border-radius: 20px;
                      font-size: 12px;
                      font-weight: 500;
                      margin-left: 10px;
                  }
                  .stats {
                      background: #f8f9fa;
                      padding: 20px;
                      border-radius: 8px;
                      margin: 30px 0;
                      text-align: center;
                      border-left: 4px solid #667eea;
                  }
                  .stats h3 {
                      margin: 0 0 10px 0;
                      color: #2c3e50;
                  }
                  .footer { 
                      text-align: center; 
                      margin-top: 50px; 
                      padding-top: 30px; 
                      border-top: 2px solid #e1e8ed;
                      color: #6a737d;
                  }
                  .footer strong {
                      color: #2c3e50;
                  }
                  .no-branches {
                      text-align: center;
                      padding: 40px;
                      color: #6c757d;
                      font-style: italic;
                  }
                  @media (max-width: 768px) {
                      body { margin: 20px; padding: 10px; }
                      .container { padding: 20px; }
                      h1 { font-size: 2em; }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üß™ Allure Test Reports</h1>
                  <p class="subtitle">Relat√≥rios de teste automatizados por branch</p>
          EOF
          
          # Gera lista din√¢mica de branches
          if [ -f available-branches.txt ] && [ -s available-branches.txt ]; then
            # Conta o n√∫mero de branches
            branch_count=$(wc -l < available-branches.txt)
            
            cat >> ./pages-output/index.html << EOF
                  <div class="stats">
                      <h3>üìä Estat√≠sticas</h3>
                      <p><strong>$branch_count</strong> branch(es) com relat√≥rios dispon√≠veis</p>
                      <p>√öltima atualiza√ß√£o: $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
                  </div>
                  <ul class="branch-list">
          EOF
            
            # Gera item para cada branch
            while IFS= read -r branch; do
              if [ ! -z "$branch" ]; then
                # L√™ timestamp se existir
                timestamp="N√£o dispon√≠vel"
                if [ -f "./pages-output/$branch/timestamp.txt" ]; then
                  timestamp=$(cat "./pages-output/$branch/timestamp.txt")
                fi
                
                # Define descri√ß√£o baseada no nome da branch
                description="Relat√≥rio de testes da branch"
                badge_text="Branch"
                if [ "$branch" = "main" ] || [ "$branch" = "master" ]; then
                  description="Branch principal - Ambiente de produ√ß√£o"
                  badge_text="Principal"
                elif [ "$branch" = "develop" ] || [ "$branch" = "dev" ]; then
                  description="Branch de desenvolvimento - Ambiente de teste"
                  badge_text="Desenvolvimento"
                elif [[ "$branch" == feature/* ]]; then
                  description="Feature branch - Nova funcionalidade"
                  badge_text="Feature"
                elif [[ "$branch" == hotfix/* ]]; then
                  description="Hotfix branch - Corre√ß√£o urgente"
                  badge_text="Hotfix"
                fi
                
                cat >> ./pages-output/index.html << EOF
                      <li class="branch-item">
                          <a href="./$branch/">üìã $branch</a>
                          <span class="branch-badge">$badge_text</span>
                          <div class="description">$description</div>
                          <div class="timestamp">√öltima atualiza√ß√£o: $timestamp</div>
                      </li>
          EOF
              fi
            done < available-branches.txt
            
            cat >> ./pages-output/index.html << 'EOF'
                  </ul>
          EOF
          else
            cat >> ./pages-output/index.html << 'EOF'
                  <div class="no-branches">
                      <p>üîç Nenhum relat√≥rio encontrado ainda.</p>
                      <p>Os relat√≥rios aparecer√£o aqui ap√≥s a execu√ß√£o dos testes.</p>
                  </div>
          EOF
          fi
          
          # Finaliza o HTML
          cat >> ./pages-output/index.html << 'EOF'
                  <div class="footer">
                      <p>üöÄ Powered by <strong>Allure Framework</strong> & <strong>GitHub Actions</strong></p>
                      <p>üîÑ Atualizado automaticamente a cada push</p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          echo "‚úÖ Dynamic index page created with $(wc -l < available-branches.txt 2>/dev/null || echo 0) branches"
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './pages-output'
          
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4